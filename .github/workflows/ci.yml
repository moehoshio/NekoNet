name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Windows builds
          - {
              name: "Windows MSVC Debug",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              build_type: "Debug",
              generators: "Visual Studio 17 2022"
            }
          - {
              name: "Windows MSVC Release",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              build_type: "Release",
              generators: "Visual Studio 17 2022"
            }
          
          # Linux builds
          - {
              name: "Ubuntu GCC Debug",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
              build_type: "Debug",
              generators: "Unix Makefiles"
            }
          - {
              name: "Ubuntu GCC Release",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
              build_type: "Release",
              generators: "Unix Makefiles"
            }

          # macOS builds
          - {
              name: "macOS Clang Debug",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
              build_type: "Debug",
              generators: "Unix Makefiles"
            }
          - {
              name: "macOS Clang Release",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
              build_type: "Release",
              generators: "Unix Makefiles"
            }

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies (Ubuntu)
      if: startsWith(matrix.config.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build software-properties-common
        
        # Install libcurl and OpenSSL dependencies
        sudo apt-get install -y \
          libcurl4-openssl-dev \
          libssl-dev \
          zlib1g-dev \
          pkg-config
        
        # Try to install minizip-ng (may not be available on all Ubuntu versions)
        sudo apt-get install -y libminizip-ng-dev || \
          sudo apt-get install -y libminizip-dev || \
          echo "Neither libminizip-ng-dev nor libminizip-dev available, will try building from source"
        
        # If minizip-ng is not available via apt, build from source
        if ! pkg-config --exists minizip-ng && ! pkg-config --exists minizip; then
          echo "Building minizip-ng from source..."
          cd /tmp
          git clone --depth 1 --branch 4.0.7 https://github.com/zlib-ng/minizip-ng.git
          cd minizip-ng
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DMZ_COMPAT=OFF \
            -DMZ_ZLIB=ON \
            -DMZ_BZIP2=OFF \
            -DMZ_LZMA=OFF \
            -DMZ_ZSTD=OFF \
            -DMZ_OPENSSL=OFF \
            -DMZ_FETCH_LIBS=OFF
          cmake --build build --parallel
          sudo cmake --install build
          cd $GITHUB_WORKSPACE
        fi
        
        # Install GCC-13 from toolchain PPA
        if [[ "${{ matrix.config.cxx }}" == g++-13 ]]; then
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y gcc-13 g++-13
        # Install Clang-16 from LLVM APT repository
        elif [[ "${{ matrix.config.cxx }}" == clang++-16 ]]; then
          wget -O - https://apt.llvm.org/llvm.sh | sudo bash -s -- 16
          sudo apt-get install -y clang-16 clang++-16
        # Install other Clang versions
        elif [[ "${{ matrix.config.cxx }}" == clang* ]]; then
          sudo apt-get install -y ${{ matrix.config.cxx }}
        fi

    - name: Check compiler versions (Debug)
      if: startsWith(matrix.config.os, 'ubuntu')
      run: |
        echo "=== Compiler Information ==="
        ${{ matrix.config.cxx }} --version
        echo "=== CMake Information ==="
        cmake --version
        echo "=== Standard Library Check ==="
        echo '#include <version>' | ${{ matrix.config.cxx }} -std=c++20 -x c++ -E - 2>/dev/null && echo "C++20 headers available" || echo "C++20 headers missing"
        echo '#include <source_location>' | ${{ matrix.config.cxx }} -std=c++20 -x c++ -E - 2>/dev/null && echo "source_location available" || echo "source_location missing"
        echo '#include <format>' | ${{ matrix.config.cxx }} -std=c++20 -x c++ -E - 2>/dev/null && echo "format available" || echo "format missing"
        echo "=== pkg-config check ==="
        pkg-config --modversion libcurl || echo "libcurl not found via pkg-config"
        pkg-config --modversion openssl || echo "openssl not found via pkg-config"
        pkg-config --cflags libcurl || echo "libcurl cflags not available"
        pkg-config --libs libcurl || echo "libcurl libs not available"
        echo "=== minizip-ng check ==="
        pkg-config --modversion minizip-ng || echo "minizip-ng not found via pkg-config"
        pkg-config --modversion minizip || echo "minizip not found via pkg-config"
        pkg-config --cflags minizip-ng || pkg-config --cflags minizip || echo "minizip cflags not available"
        echo "=== CMake minizip-ng check ==="
        cmake --find-package -DNAME=minizip-ng -DCOMPILER_ID=GNU -DLANGUAGE=C -DMODE=EXIST || echo "minizip-ng not found by CMake"
      continue-on-error: true

    - name: Install dependencies (macOS)
      if: startsWith(matrix.config.os, 'macos')
      run: |
        brew install cmake ninja curl openssl zlib pkg-config minizip-ng

    - name: Verify dependencies (macOS)
      if: startsWith(matrix.config.os, 'macos')
      run: |
        echo "=== Homebrew prefix ==="
        brew --prefix
        echo ""
        echo "=== curl location ==="
        brew --prefix curl
        ls -la $(brew --prefix curl)/lib/pkgconfig/ || true
        echo ""
        echo "=== openssl location ==="
        brew --prefix openssl
        brew --prefix openssl@3
        ls -la $(brew --prefix openssl@3)/lib/pkgconfig/ || true
        echo ""
        echo "=== pkg-config test ==="
        PKG_CONFIG_PATH="$(brew --prefix)/opt/curl/lib/pkgconfig:$(brew --prefix)/opt/openssl@3/lib/pkgconfig" pkg-config --modversion libcurl || true
        PKG_CONFIG_PATH="$(brew --prefix)/opt/curl/lib/pkgconfig:$(brew --prefix)/opt/openssl@3/lib/pkgconfig" pkg-config --modversion openssl || true
      continue-on-error: true

    - name: Set up MSVC environment (Windows)
      if: startsWith(matrix.config.os, 'windows') && matrix.config.cc == 'cl'
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Setup vcpkg (Windows)
      if: startsWith(matrix.config.os, 'windows')
      run: |
        git clone --depth 1 https://github.com/Microsoft/vcpkg.git C:\vcpkg
        C:\vcpkg\bootstrap-vcpkg.bat -disableMetrics
      shell: cmd

    - name: Cache vcpkg packages (Windows)
      if: startsWith(matrix.config.os, 'windows')
      uses: actions/cache@v4
      with:
        path: |
          C:\vcpkg\installed
          C:\vcpkg\packages
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}-x64-windows
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Install dependencies via vcpkg (Windows)
      if: startsWith(matrix.config.os, 'windows')
      run: |
        echo "Installing packages..."
        C:\vcpkg\vcpkg install curl:x64-windows openssl:x64-windows zlib:x64-windows minizip-ng:x64-windows
        echo "Integrating vcpkg..."
        C:\vcpkg\vcpkg integrate install
        echo "Listing installed packages..."
        C:\vcpkg\vcpkg list
        echo VCPKG_ROOT=C:\vcpkg >> %GITHUB_ENV%
      shell: cmd

    - name: Verify vcpkg installation (Windows)
      if: startsWith(matrix.config.os, 'windows')
      run: |
        echo "=== vcpkg Information ==="
        echo "VCPKG_ROOT: $env:VCPKG_ROOT"
        echo "Toolchain file exists:"
        Test-Path "C:\vcpkg\scripts\buildsystems\vcpkg.cmake"
        echo ""
        echo "=== Installed packages ==="
        C:\vcpkg\vcpkg list
        echo ""
        echo "=== libcurl files ==="
        Get-ChildItem "C:\vcpkg\installed\x64-windows" -Recurse -Include "*curl*" | Select-Object FullName -First 10
      shell: pwsh
      continue-on-error: true

    - name: Install build tools (Windows)
      if: startsWith(matrix.config.os, 'windows')
      run: |
        if ("${{ matrix.config.generators }}" -eq "Ninja") {
          choco install ninja
          # Setup Clang
          choco install llvm
        }

    - name: Configure CMake
      run: |
        if [[ "${{ matrix.config.generators }}" == *"Visual Studio"* ]]; then
          # For Visual Studio generators with vcpkg on Windows
          echo "Configuring with vcpkg toolchain: C:/vcpkg/scripts/buildsystems/vcpkg.cmake"
          cmake -B build \
            -G "${{ matrix.config.generators }}" \
            -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=x64-windows \
            -DNEKO_BUILD_TESTS=ON \
            -DNEKO_AUTO_FETCH_DEPS=ON
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          # For macOS, set prefix path for Homebrew packages
          # Support both Apple Silicon (/opt/homebrew) and Intel (/usr/local)
          if [[ -d "/opt/homebrew" ]]; then
            BREW_PREFIX="/opt/homebrew"
          else
            BREW_PREFIX="/usr/local"
          fi
          echo "Using Homebrew prefix: $BREW_PREFIX"
          
          # Set PKG_CONFIG_PATH for finding curl and openssl
          export PKG_CONFIG_PATH="$BREW_PREFIX/opt/curl/lib/pkgconfig:$BREW_PREFIX/opt/openssl@3/lib/pkgconfig:$BREW_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
          
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -G "${{ matrix.config.generators }}" \
            -DCMAKE_PREFIX_PATH="$BREW_PREFIX;$BREW_PREFIX/opt/curl;$BREW_PREFIX/opt/openssl@3" \
            -DOPENSSL_ROOT_DIR="$BREW_PREFIX/opt/openssl@3" \
            -DNEKO_BUILD_TESTS=ON \
            -DNEKO_AUTO_FETCH_DEPS=ON
        else
          # For other generators (Linux), specify the compiler explicitly
          # Add /usr/local to CMAKE_PREFIX_PATH for packages built from source
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -G "${{ matrix.config.generators }}" \
            -DCMAKE_PREFIX_PATH="/usr/local;/usr" \
            -DNEKO_BUILD_TESTS=ON \
            -DNEKO_AUTO_FETCH_DEPS=ON
        fi
      shell: bash

    - name: Build
      run: cmake --build build --config ${{ matrix.config.build_type }} --parallel

    - name: List build artifacts (Debug)
      if: runner.os == 'Windows'
      run: |
        echo "=== Build Directory Contents ==="
        dir build\${{ matrix.config.build_type }}
        echo ""
        echo "=== DLL Files ==="
        dir build\${{ matrix.config.build_type }}\*.dll
      shell: cmd
      continue-on-error: true

    - name: Run tests
      working-directory: build
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          if [ "${{ matrix.config.generators }}" = "Visual Studio 17 2022" ] || [ "${{ matrix.config.generators }}" = "Visual Studio 16 2019" ]; then
            # Run ctest with detailed output
            echo "Running tests for ${{ matrix.config.build_type }} configuration..."
            ctest -C ${{ matrix.config.build_type }} --output-on-failure --verbose
          else
            ctest --output-on-failure --verbose
          fi
        else
          ctest --output-on-failure --verbose
        fi
      shell: bash

    - name: Run disabled network tests (allow failure)
      working-directory: build
      run: |
        echo "=== Running disabled network tests (these may fail due to network conditions) ==="
        if [ "${{ runner.os }}" = "Windows" ]; then
          if [ "${{ matrix.config.generators }}" = "Visual Studio 17 2022" ] || [ "${{ matrix.config.generators }}" = "Visual Studio 16 2019" ]; then
            ./${{ matrix.config.build_type }}/NekoNet_tests.exe --gtest_also_run_disabled_tests --gtest_filter=DISABLED_* || echo "Some disabled tests failed (expected)"
          else
            ./NekoNet_tests.exe --gtest_also_run_disabled_tests --gtest_filter=DISABLED_* || echo "Some disabled tests failed (expected)"
          fi
        else
          ./NekoNet_tests --gtest_also_run_disabled_tests --gtest_filter=DISABLED_* || echo "Some disabled tests failed (expected)"
        fi
      shell: bash
      continue-on-error: true

    - name: Upload build artifacts (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.config.name }}
        path: |
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log
          build/Testing/Temporary/LastTest.log